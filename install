#!/usr/bin/env php
<?php
# Some functions to help the process...
function installComposer() {
	echo c("Attempting to download and install Composer... this may take a while...\n", "success");
	$sig = file_get_contents("https://composer.github.io/installer.sig");
	if ($sig === false) 
		exit(c("Error downloading Composer! Try installing Composer manually...\n", "danger"));
	$ret = copy('https://getcomposer.org/installer', 'composer-setup.php');
	if ($ret === false) 
		exit(c("Error downloading Composer! Try installing Composer manually...\n", "danger"));
	if (trim($sig) != hash_file('SHA384', 'composer-setup.php')) {
		unlink("composer-setup.php");
		exit(c("Error downloading Composer installer! Try installing Composer manually...\n", "danger"));
	}
	exec("php composer-setup.php --quiet", $result, $status);
	unlink("composer-setup.php");
	if ($status != 0 ) {
		foreach ($result as $line) echo $line. "\n";
		exit(c("Error installingdownloading Composer! Try installing Composer manually...\n", "danger"));
	}
	echo(c("Composer successfully installed!\n", "success"));
}
function c($text, $status) {
	# Colorize the output
	switch ($status) {
		case "danger";
		return "\033[31m" . $text . "\033[0m";
		case "success";
		return "\033[32m" . $text . "\033[0m";
		case "warning";
		return "\033[33m" . $text . "\033[0m";
	}
}
function checkVersion($name, $command, $min, $recommended, $unsupported = null) {
	exec($command, $result, $status);
	if ($status != 0) {
		echo c($name . " does not seem to be installed\n", "danger");
		return(1);
	} 
	preg_match ("/([\d\.-]+)/", $result[0], $version);
	if (sizeof($version)==0) {
		echo c("Error reading the version of " . $name . "\n", "warning");
		return(1);
	}
	if ( version_compare ($version[0], $min, "<"))	{ 
		echo c($name . " version is not compatible! Please upgrade!\n", "danger");
		return(1);
	} 
	if ( version_compare ($version[0], $recommended, "<")) {
		echo c($name . " version is below recommended...\n", "warning");
		return(1);
	}
	if ($unsupported and version_compare ($version[0], $unsupported, ">=")) {
		echo c($name . " version is currently unsupported! Downgrade if able...\n", "danger");
		return(1);
	}
}
function checkContinue() {
	echo "Continue? yes/[no] ";
	$line = trim(fgets(STDIN));
	if ($line != "yes" and $line != "y")
		exit(c("Exiting...\n", "danger"));
}

echo c("Starting OpenDataBio installation! :)\n", "success");

echo "Checking versions...\n";
$trouble = 0;
$trouble = $trouble + checkVersion("Apache Web Server", "httpd -v", "2.2", "2.4");
$trouble = $trouble + checkVersion("PHP", "php -v", "5.6", "7.0");
$trouble = $trouble + checkVersion("MySQL database", "mysql --version", "5.5", "5.7");
$trouble = $trouble + checkVersion("ImageMagick", "convert --version", "6.7.7", "6.8.9", "7.0");
if($trouble == 0)
	echo c("All versions compatible!\n", "success");
echo "Checking configuration...\n";
if (! extension_loaded("openssl"))
	exit(c("OpenSSL PHP extension is required!\n", "danger"));
if (! extension_loaded("pdo"))
	exit(c("PDO PHP extension is required!\n", "danger"));
if (! extension_loaded("pdo_mysql"))
	exit(c("PDO MySQL PHP extension is required! Try running 'apt-get install php5-mysql'\n", "danger"));
if (! extension_loaded("mbstring"))
	exit(c("MBstring PHP extension is required!\n", "danger"));
if (! extension_loaded("tokenizer"))
	exit(c("Tokenizer PHP extension is required!\n", "danger"));
if (! extension_loaded("xml"))
	exit(c("XML PHP extension is required!\n", "danger"));
if (! extension_loaded("apcu"))
	echo c("Apcu PHP extension is recommended for better performance...\n", "warning");
if (! extension_loaded("opcache"))
	echo c("Opcache PHP extension is recommended for better performance...\n", "warning");
if (! ini_get("allow_url_fopen"))
	exit(c("The PHP initialization directive allow_url_fopen must be set to true!\n", "danger"));

checkContinue();

#### TODO: move this after composer install
require "./vendor/autoload.php";

$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();
print_r(getenv());

# Check if .env file exists and is compatible


exit();
## Do we have a system-wide composer, system-wise composer.phar or local composer.phar?
exec("composer", $result, $status);
if ($status == 0) {
	$composer = "composer";
	echo "Using system-wide composer...\n";
} else {
	exec("composer.phar", $result, $status);
	if ($status == 0) {
		$composer = "composer.phar";
		echo "Using system-wide composer.phar...\n";
	} else {
		if (! file_exists("composer.phar")) {
			installComposer();
		}
		$composer = "php composer.phar";
		echo "Using local composer.phar...\n";
	}
}

checkContinue();
exec($composer . " install", $result, $status);
if ($status == 0) {
	echo c("PHP dependencies installed dependencies successfully!\n", "success");
} else {
	foreach ($result as $line) echo $line. "\n";
	exit (c("Running 'composer install' failed!\n", "danger"));
}
