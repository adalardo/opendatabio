#!/usr/bin/env php
<?php
# Some functions to help the process...
function installComposer() {
	echo c("Attempting to download and install Composer... this may take a while...\n", "success");
	$sig = file_get_contents("https://composer.github.io/installer.sig");
	if ($sig === false) 
		exit(c("Error downloading Composer! Try installing Composer manually...\n", "danger"));
	$ret = copy('https://getcomposer.org/installer', 'composer-setup.php');
	if ($ret === false) 
		exit(c("Error downloading Composer! Try installing Composer manually...\n", "danger"));
	if (trim($sig) != hash_file('SHA384', 'composer-setup.php')) {
		unlink("composer-setup.php");
		exit(c("Error downloading Composer installer! Try installing Composer manually...\n", "danger"));
	}
	exec("php composer-setup.php --quiet", $result, $status);
	unlink("composer-setup.php");
	if ($status != 0 ) {
		foreach ($result as $line) echo $line. "\n";
		exit(c("Error installingdownloading Composer! Try installing Composer manually...\n", "danger"));
	}
	echo(c("Composer successfully installed!\n", "success"));
}
function c($text, $status) {
	# Colorize the output
	switch ($status) {
		case "danger";
		return "\033[31m" . $text . "\033[0m";
		case "success";
		return "\033[32m" . $text . "\033[0m";
		case "warning";
		return "\033[33m" . $text . "\033[0m";
	}
}
function testDB() {
exec("mysql -u".getenv('DB_USERNAME').
	  " -h".getenv('DB_HOST').
	  " -p".getenv('DB_PASSWORD').
	  " ".getenv('DB_DATABASE') ."<<EOF
SELECT 1;
EOF", $result, $status);
	return ($status);
}
function checkVersion($name, $command, $min, $recommended, $unsupported = null) {
	exec($command, $result, $status);
	if ($status != 0) {
		echo c($name . " does not seem to be installed\n", "danger");
		return(1);
	} 
	preg_match ("/([\d\.-]+)/", $result[0], $version);
	if (sizeof($version)==0) {
		echo c("Error reading the version of " . $name . "\n", "warning");
		return(1);
	}
	if ( version_compare ($version[0], $min, "<"))	{ 
		echo c($name . " version is not compatible! Please upgrade!\n", "danger");
		return(1);
	} 
	if ( version_compare ($version[0], $recommended, "<")) {
		echo c($name . " version is below recommended...\n", "warning");
		return(1);
	}
	if ($unsupported and version_compare ($version[0], $unsupported, ">=")) {
		echo c($name . " version is currently unsupported! Downgrade if able...\n", "danger");
		return(1);
	}
}
function checkContinue() {
	echo "Continue? yes/[no] ";
	$line = trim(fgets(STDIN));
	if ($line != "yes" and $line != "y")
		exit(c("Exiting...\n", "danger"));
}
function writeDotEnv($key, $value) { // edited from Laravel Framework @ KeyGenerateCommand.php
	file_put_contents(".env", preg_replace(
		"/^{$key}=.+/m",
		"{$key}=".$value,
		file_get_contents(".env")
	));
}

echo c("Starting OpenDataBio installation! :)\n", "success");

echo "Checking versions...\n";
$trouble = 0;
# Determining cmdline for apache2ctl / httpd
exec("which httpd", $result, $status);
if ($status == 0) {
	# ArchLinux, CentOS, Fedora, Red Hat use:
	$apachecmd = "httpd";
} else {
	# is there an user-accessible apachectl?
	exec("which apachectl", $result, $status);
	if ($status == 0) {
		$apachecmd = "apachectl";
	} else { # try a /usr/sbin installation
		$apachecmd = "/usr/sbin/apachectl";
	}
}
$trouble = $trouble + checkVersion("Apache Web Server", $apachecmd . " -v", "2.2", "2.4");
$trouble = $trouble + checkVersion("PHP", "php -v", "5.6", "7.0");
$trouble = $trouble + checkVersion("MySQL database", "mysql --version", "5.5", "5.7");
$trouble = $trouble + checkVersion("Pandoc", "pandoc --version", "1.10", "1.10");
$trouble = $trouble + checkVersion("ImageMagick", "convert --version", "6.7.7", "6.8.9", "7.0");
if($trouble == 0)
	echo c("All versions compatible!\n", "success");
echo "Checking configuration...\n";
### PHP extensions
if (! extension_loaded("openssl"))
	exit(c("OpenSSL PHP extension is required!\n", "danger"));
if (! extension_loaded("pdo"))
	exit(c("PDO PHP extension is required!\n", "danger"));
if (! extension_loaded("pdo_mysql"))
	exit(c("PDO MySQL PHP extension is required! Try running 'apt-get install php5-mysql'\n", "danger"));
if (! extension_loaded("mbstring"))
	exit(c("MBstring PHP extension is required!\n", "danger"));
if (! extension_loaded("tokenizer"))
	exit(c("Tokenizer PHP extension is required!\n", "danger"));
if (! extension_loaded("xml"))
	exit(c("XML PHP extension is required!\n", "danger"));
if (! extension_loaded("apcu"))
	echo c("Apcu PHP extension is recommended for better performance...\n", "warning");
if (! extension_loaded("opcache"))
	echo c("Opcache PHP extension is recommended for better performance...\n", "warning");
if (! ini_get("allow_url_fopen"))
	exit(c("The PHP initialization directive allow_url_fopen must be set to true!\n", "danger"));
### Apache config
exec($apachecmd . " -M", $result, $status);
$rewrite = false; $userdir = false;
foreach ($result as $str) {
  if (preg_match ('/rewrite/i', $str, $m))
	  $rewrite = true;
  if (preg_match ('/alias/i', $str, $m))
	  $alias = true;
}
if (! $alias)
	echo c("The 'mod_alias' Apache module is recommended, but it's not loaded...\n", "warning");
if (! $rewrite)
	echo c("The 'mod_rewrite' Apache module is recommended, but it's not loaded...\n", "warning");

checkContinue();
# Determine which composer to use and run 'composer install'
# Do we have a system-wide composer, system-wise composer.phar or local composer.phar?
exec("composer", $result, $status);
if ($status == 0) {
	$composer = "composer";
	echo "Using system-wide composer...\n";
} else {
	exec("composer.phar", $result, $status);
	if ($status == 0) {
		$composer = "composer.phar";
		echo "Using system-wide composer.phar...\n";
	} else {
		if (! file_exists("composer.phar")) {
			installComposer();
		}
		$composer = "php composer.phar";
		echo "Using local composer.phar...\n";
	}
}
exec($composer . " install", $result, $status);
if ($status == 0) {
	echo c("PHP dependencies installed dependencies successfully!\n", "success");
} else {
	foreach ($result as $line) echo $line. "\n";
	exit (c("Running 'composer install' failed!\n", "danger"));
}

echo c("Clearing caches...\n", "success");
system("php artisan config:clear");
system("php artisan route:clear");
system("php artisan view:clear");
system("php artisan cache:clear");
system("composer dump-autoload");

# Process DotEnv file
if(file_exists(".env")) {
	echo c("Using .env environment file\n", "success");
} else {
	echo c("Creating new .env environment file\n", "success");
	$ret = copy('.env.example', '.env');
	if ($ret === false) 
		exit(c("Error creating .env file! Check that you have write permission on current directory!\n", "danger"));
	system("php artisan key:generate");
}

require "./vendor/autoload.php";
$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();

echo "Do you wish to review the configuration for your app? [yes]/no ";
$line = trim(fgets(STDIN));
if ($line == "" or $line == "y" or $line == "yes") {

	echo c("Setting the environment variables... for more options, edit the .env file later!\n", "success");
	echo "Is this installation for development or production? [production]/development ";
	$line = trim(fgets(STDIN));
	if ($line == "" or $line == "production") {
		echo "Using production settings!\n";
		writeDotEnv('APP_ENV', 'production');
		writeDotEnv('APP_DEBUG', 'false');
	} else {
		echo "Using development settings!\n";
		writeDotEnv('APP_ENV', 'local');
		writeDotEnv('APP_DEBUG', 'true');
	}
	echo "What should the base URL for your app be? [".getenv('APP_URL')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('APP_URL', $line);
	echo "Database username? [".getenv('DB_USERNAME')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('DB_USERNAME', $line);
	echo "Database password? [".getenv('DB_PASSWORD')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('DB_PASSWORD', $line);
	echo "Database name? [".getenv('DB_DATABASE')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('DB_DATABASE', $line);
	echo "Proxy host (leave blank for no proxy)? [".getenv('PROXY_URL')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_URL', $line);
	echo "Proxy port? [".getenv('PROXY_PORT')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_PORT', $line);
	echo "Proxy username (leave blank if not required)? [".getenv('PROXY_USER')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_USER', $line);
	echo "Proxy password? [".getenv('PROXY_PASSWD')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_PASSWD', $line);
	# Reloads the environment file
	$dotenv->load();
}

# Database user and connection
echo "Testing database connection...\n";
require "./vendor/autoload.php";
$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();
if (testDB() != 0) {
	echo c("Database connection failed!\n", "warning");
	echo c("Do you want to create the database user and schema? [yes]/no ", "warning");
	$line = trim(fgets(STDIN));
	if ($line != "" and $line != "y" and $line != "yes") {
		exit(c("Unable to complete installation. Please create the database and database user.\n", "danger"));
	} else {
		echo c("You will be prompted now for the MySQL root password:\n", "warning");
		exec('mysql -uroot -p <<EOF
CREATE DATABASE \`' . getenv('DB_DATABASE') . '\`;
CREATE USER \`' . getenv('DB_USERNAME') . '\`@\`localhost\` IDENTIFIED BY \''. getenv('DB_PASSWORD'). '\';
GRANT ALL ON \`' . getenv('DB_DATABASE') . '\`.* TO \`' . getenv('DB_USERNAME') . '\`@\`localhost\`;
EOF', $result, $status);
		if ($status != 0 or testDB() != 0) 
			exit(c("Unable to create database! Try to create the user and database manually...\n", "danger"));
	}
}
echo c("Database connection successfull!\n", "success");

echo "Running database migrations... This may take a while...\n";
system("php artisan migrate", $status);
if ($status != 0) {
	exit (c("running 'php artisan migrate' failed!\n", "danger"));
}

echo "Do you wish to seed the database with randomly generated test data? yes/[no] ";
$line = trim(fgets(STDIN));
if ($line == "y" or $line == "yes") {
	system("php artisan db:seed", $status);
	if ($status != 0) {
		exit (c("running 'php artisan db:seed' failed!\n", "danger"));
	}
}


if (getenv('APP_ENV') == 'production') {
	echo c("Running code optimizations for production environment...\n", "success");
	system("php artisan config:cache");
	system("php artisan route:cache");
	system("php artisan optimize");
}

echo "Changing storage area permissions...\n";
exec("chmod -R 777 storage");
exec("chmod -R 777 bootstrap/cache");

echo "Running checks with present data...\n";
system("php artisan tinker <<EOF
	App\Location::fixTree();
EOF");

# TODO: change default queue settings for dev / prod
# TODO: check supervisor availability for prod
# TODO: test proxy settings
